
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>

using namespace std;
//
//
void PrintFigure(bool IsWhite, string type){
    if(IsWhite){
        if(type == "pawn") cout << "p";
        else if(type == "rook") cout << "r";
        else if(type == "knight") cout << "n";
        else if(type == "bishop") cout << "b";
        else if(type == "queen") cout << "q";
        else if(type == "king") cout << "k";
        else cout << ".";
    }
    else{
        if(type == "pawn") cout << "P";
        else if(type == "rook") cout << "R";
        else if(type == "knight") cout << "N";
        else if(type == "bishop") cout << "B";
        else if(type == "queen") cout << "Q";
        else if(type == "king") cout << "K";
        else cout << ".";
    }
}
//
//
class figure;

class board;

class figure {
public:
    figure(int x, int y, bool IsWhite, string type){
        Position[0] = y;
        Position[1] = x;
        this->IsWhite = IsWhite;
        this->type = type;
    } 

    void Move(int x, int y);
    void CheckIfCanMoveTo();
    void PrintThis(){PrintFigure(IsWhite,type);}
    
    string GetType(){return type;}
    bool GetIsWhite(){return IsWhite;}
    bool GetPositionX(){return Position[1];}
    bool GetPositionY(){return Position[0];}    
    bool GetHaveMoved(){return HaveMoved;}
    
    void SetParent(board* parent){this->parent = parent;}
    void SetType(string type){this->type = type;}
    void SetPositionX(int x){Position[1] = x;}
    void SetPositionY(int y){Position[0] = y;}
    void SetPosition(int x, int y){Position[0] = y; Position[1] = x;}
    void SetHaveMoved(bool HaveMoved){this->HaveMoved = HaveMoved;}
    
protected:
    bool IsWhite = true;
    int Position[2] = { 0,0 };
    string type;
    bool HaveMoved = false;
    board* parent = nullptr;
};

class board {
public:
    void play();
    void PrintBoard();
    void SetBoard();
    figure*** Placements;
protected:
    
};
void board::SetBoard() {
    Placements = new figure * *[8];
    for (int i = 0; i < 8; i++) {
        Placements[i] = new figure * [8];
    }
    //
    Placements[0][0] = new figure(0, 0, true, "rook");
    Placements[0][1] = new figure(0, 1, true, "rook");
    Placements[0][2] = new figure(0, 2, true, "rook");
    Placements[0][3] = new figure(0, 3, true, "rook");
    Placements[0][4] = new figure(0, 4, true, "rook");
    Placements[0][5] = new figure(0, 5, true, "rook");
    Placements[0][6] = new figure(0, 6, true, "rook");
    Placements[0][7] = new figure(0, 7, true, "rook");
    for (int i = 0; i < 8; i++) {
        Placements[1][i] = new figure(1, i, true, "rook");
    }
    //
    Placements[7][0] = new figure(7, 0, true, "rook");
    Placements[7][1] = new figure(7, 1, true, "rook");
    Placements[7][2] = new figure(7, 2, true, "rook");
    Placements[7][3] = new figure(7, 3, true, "rook");
    Placements[7][4] = new figure(7, 4, true, "rook");
    Placements[7][5] = new figure(7, 5, true, "rook");
    Placements[7][6] = new figure(7, 6, true, "rook");
    Placements[7][7] = new figure(7, 7, true, "rook");
    for (int i = 0; i < 8; i++) {
        Placements[6][i] = new figure(6, i, true, "rook");
    //
    for (int i = 0; i < 8; i++) {
        for (int j = 2; j < 6; j++) {
            Placements[j][i] = new figure(j, i, true, "rook");
        }
    }
    //
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            Placements[j][i]->SetParent(this);
        }
    }
}
void board::PrintBoard() {
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            Placements[7-i][j]->PrintThis();
        }
        cout << endl;
    }
}
void figure::Move(int y, int x){
    figure* temp = parent->Placements[y][x];
    if(temp->GetType() != "empty"){ temp->SetType("empty");
    }
    parent->Placements[y][x] = this;
    parent->Placements[Position[0]][Position[1]] = temp;
    SetPositionX(x);
    SetPositionY(y);
}


int main() {
    board som;
    som.SetBoard();
    som.PrintBoard();
    som.Placements[0][4]->Move(7,4);
    som.PrintBoard();
    som.Placements[7][4]->Move(0,4);
    som.Placements[6][4]->Move(1,4);
    som.PrintBoard();

    return 0;
}
